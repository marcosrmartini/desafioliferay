/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liveray.client.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.liveray.client.service.model.Cliente;
import com.liveray.client.service.model.ClienteModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Cliente service. Represents a row in the &quot;client&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ClienteModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClienteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClienteImpl
 * @generated
 */
@ProviderType
public class ClienteModelImpl
	extends BaseModelImpl<Cliente> implements ClienteModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cliente model instance should use the <code>Cliente</code> interface instead.
	 */
	public static final String TABLE_NAME = "client";

	public static final Object[][] TABLE_COLUMNS = {
		{"clienteId", Types.BIGINT}, {"planoId", Types.BIGINT},
		{"nome", Types.VARCHAR}, {"rg", Types.VARCHAR},
		{"nomeMae", Types.VARCHAR}, {"nomePai", Types.VARCHAR},
		{"orgaoExpedidor", Types.VARCHAR}, {"estado", Types.VARCHAR},
		{"dataExpedicao", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("clienteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("planoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nomeMae", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nomePai", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orgaoExpedidor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estado", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataExpedicao", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table client (clienteId LONG not null primary key,planoId LONG,nome VARCHAR(75) null,rg VARCHAR(75) null,nomeMae VARCHAR(75) null,nomePai VARCHAR(75) null,orgaoExpedidor VARCHAR(75) null,estado VARCHAR(75) null,dataExpedicao DATE null)";

	public static final String TABLE_SQL_DROP = "drop table client";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cliente.clienteId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY client.clienteId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ClienteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _clienteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClienteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _clienteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Cliente.class;
	}

	@Override
	public String getModelClassName() {
		return Cliente.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Cliente, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Cliente, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Cliente, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Cliente)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Cliente, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Cliente, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Cliente)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Cliente, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Cliente, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Cliente>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Cliente.class.getClassLoader(), Cliente.class, ModelWrapper.class);

		try {
			Constructor<Cliente> constructor =
				(Constructor<Cliente>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Cliente, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Cliente, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Cliente, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Cliente, Object>>();
		Map<String, BiConsumer<Cliente, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Cliente, ?>>();

		attributeGetterFunctions.put("clienteId", Cliente::getClienteId);
		attributeSetterBiConsumers.put(
			"clienteId", (BiConsumer<Cliente, Long>)Cliente::setClienteId);
		attributeGetterFunctions.put("planoId", Cliente::getPlanoId);
		attributeSetterBiConsumers.put(
			"planoId", (BiConsumer<Cliente, Long>)Cliente::setPlanoId);
		attributeGetterFunctions.put("nome", Cliente::getNome);
		attributeSetterBiConsumers.put(
			"nome", (BiConsumer<Cliente, String>)Cliente::setNome);
		attributeGetterFunctions.put("rg", Cliente::getRg);
		attributeSetterBiConsumers.put(
			"rg", (BiConsumer<Cliente, String>)Cliente::setRg);
		attributeGetterFunctions.put("nomeMae", Cliente::getNomeMae);
		attributeSetterBiConsumers.put(
			"nomeMae", (BiConsumer<Cliente, String>)Cliente::setNomeMae);
		attributeGetterFunctions.put("nomePai", Cliente::getNomePai);
		attributeSetterBiConsumers.put(
			"nomePai", (BiConsumer<Cliente, String>)Cliente::setNomePai);
		attributeGetterFunctions.put(
			"orgaoExpedidor", Cliente::getOrgaoExpedidor);
		attributeSetterBiConsumers.put(
			"orgaoExpedidor",
			(BiConsumer<Cliente, String>)Cliente::setOrgaoExpedidor);
		attributeGetterFunctions.put("estado", Cliente::getEstado);
		attributeSetterBiConsumers.put(
			"estado", (BiConsumer<Cliente, String>)Cliente::setEstado);
		attributeGetterFunctions.put(
			"dataExpedicao", Cliente::getDataExpedicao);
		attributeSetterBiConsumers.put(
			"dataExpedicao",
			(BiConsumer<Cliente, Date>)Cliente::setDataExpedicao);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getClienteId() {
		return _clienteId;
	}

	@Override
	public void setClienteId(long clienteId) {
		_clienteId = clienteId;
	}

	@Override
	public long getPlanoId() {
		return _planoId;
	}

	@Override
	public void setPlanoId(long planoId) {
		_planoId = planoId;
	}

	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_nome = nome;
	}

	@Override
	public String getRg() {
		if (_rg == null) {
			return "";
		}
		else {
			return _rg;
		}
	}

	@Override
	public void setRg(String rg) {
		_rg = rg;
	}

	@Override
	public String getNomeMae() {
		if (_nomeMae == null) {
			return "";
		}
		else {
			return _nomeMae;
		}
	}

	@Override
	public void setNomeMae(String nomeMae) {
		_nomeMae = nomeMae;
	}

	@Override
	public String getNomePai() {
		if (_nomePai == null) {
			return "";
		}
		else {
			return _nomePai;
		}
	}

	@Override
	public void setNomePai(String nomePai) {
		_nomePai = nomePai;
	}

	@Override
	public String getOrgaoExpedidor() {
		if (_orgaoExpedidor == null) {
			return "";
		}
		else {
			return _orgaoExpedidor;
		}
	}

	@Override
	public void setOrgaoExpedidor(String orgaoExpedidor) {
		_orgaoExpedidor = orgaoExpedidor;
	}

	@Override
	public String getEstado() {
		if (_estado == null) {
			return "";
		}
		else {
			return _estado;
		}
	}

	@Override
	public void setEstado(String estado) {
		_estado = estado;
	}

	@Override
	public Date getDataExpedicao() {
		return _dataExpedicao;
	}

	@Override
	public void setDataExpedicao(Date dataExpedicao) {
		_dataExpedicao = dataExpedicao;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Cliente.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Cliente toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Cliente>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClienteImpl clienteImpl = new ClienteImpl();

		clienteImpl.setClienteId(getClienteId());
		clienteImpl.setPlanoId(getPlanoId());
		clienteImpl.setNome(getNome());
		clienteImpl.setRg(getRg());
		clienteImpl.setNomeMae(getNomeMae());
		clienteImpl.setNomePai(getNomePai());
		clienteImpl.setOrgaoExpedidor(getOrgaoExpedidor());
		clienteImpl.setEstado(getEstado());
		clienteImpl.setDataExpedicao(getDataExpedicao());

		clienteImpl.resetOriginalValues();

		return clienteImpl;
	}

	@Override
	public int compareTo(Cliente cliente) {
		long primaryKey = cliente.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Cliente)) {
			return false;
		}

		Cliente cliente = (Cliente)obj;

		long primaryKey = cliente.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Cliente> toCacheModel() {
		ClienteCacheModel clienteCacheModel = new ClienteCacheModel();

		clienteCacheModel.clienteId = getClienteId();

		clienteCacheModel.planoId = getPlanoId();

		clienteCacheModel.nome = getNome();

		String nome = clienteCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			clienteCacheModel.nome = null;
		}

		clienteCacheModel.rg = getRg();

		String rg = clienteCacheModel.rg;

		if ((rg != null) && (rg.length() == 0)) {
			clienteCacheModel.rg = null;
		}

		clienteCacheModel.nomeMae = getNomeMae();

		String nomeMae = clienteCacheModel.nomeMae;

		if ((nomeMae != null) && (nomeMae.length() == 0)) {
			clienteCacheModel.nomeMae = null;
		}

		clienteCacheModel.nomePai = getNomePai();

		String nomePai = clienteCacheModel.nomePai;

		if ((nomePai != null) && (nomePai.length() == 0)) {
			clienteCacheModel.nomePai = null;
		}

		clienteCacheModel.orgaoExpedidor = getOrgaoExpedidor();

		String orgaoExpedidor = clienteCacheModel.orgaoExpedidor;

		if ((orgaoExpedidor != null) && (orgaoExpedidor.length() == 0)) {
			clienteCacheModel.orgaoExpedidor = null;
		}

		clienteCacheModel.estado = getEstado();

		String estado = clienteCacheModel.estado;

		if ((estado != null) && (estado.length() == 0)) {
			clienteCacheModel.estado = null;
		}

		Date dataExpedicao = getDataExpedicao();

		if (dataExpedicao != null) {
			clienteCacheModel.dataExpedicao = dataExpedicao.getTime();
		}
		else {
			clienteCacheModel.dataExpedicao = Long.MIN_VALUE;
		}

		return clienteCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Cliente, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Cliente, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Cliente, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Cliente)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Cliente, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Cliente, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Cliente, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Cliente)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Cliente>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _clienteId;
	private long _planoId;
	private String _nome;
	private String _rg;
	private String _nomeMae;
	private String _nomePai;
	private String _orgaoExpedidor;
	private String _estado;
	private Date _dataExpedicao;
	private Cliente _escapedModel;

}